# Enables mouse for selection
set -g mouse on

# Screen like binding
unbind C-b
set -g prefix C-a
bind a send-prefix

# Use vim keybindings in copy mode
setw -g mode-keys vi
set -g status-keys vi

# No escape time for vi mode
set -sg escape-time 0

# Change copy-mode default key
unbind [
bind-key -r i copy-mode

# Paste with p modifier
unbind p
bind C-p paste-buffer
# Start selection with v once in vi-copy
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ',xterm-256color:Tc'

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Create splits and vertical splits
bind-key v split-window -h -p 50 -c "#{pane_current_path}"
bind-key ^V split-window -h -p 50 -c "#{pane_current_path}"
bind-key s split-window -p 50 -c "#{pane_current_path}"
bind-key ^S split-window -p 50 -c "#{pane_current_path}"

# easier and faster switching between next/prev window
bind C-p previous-window
bind C-n next-window

# Pane resize in all four directions using vi bindings.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1


# Screen like binding for last window
unbind l
bind C-a last-window

# Bigger history
set -g history-limit 10000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"


## Loud or quiet?
set-option -g visual-activity off  # Do not notify for events on panes
set-option -g visual-bell on
set-option -g visual-silence off
setw -g monitor-activity on
set-window-option -g monitor-activity on
set-option -g bell-action none

# Status update interval
set -g status-interval 1

set -g display-panes-time 2000

# START THEME
set -g status-bg '#201e21'
set -g status-fg '#b4b4b4'

## Left side of status bar
set -g status-left ""

## Right side of status bar
set -g status-right-style fg=black,bold
set -g status-right-length 40
set -g status-right "#[fg=colour232,bg=colour240] %d/%b #[bg=colour248] %H:%M:%S "

## Window selection menu
set -g mode-style fg=colour232,bg=colour14

### Selected window
set -g window-status-current-style fg=colour232,bg=colour14,bold
set -g window-status-current-format ' #I:#W#F '

set -g window-status-style fg=colour7,bg='#2d2d2d',bold
setw -g window-status-format ' #I:#W#F '


#set -g status-left '#[fg=colour232,bg=colour202,bold]#{?client_prefix, <Prefix> ,}#[fg=colour255,bg=colour234,bold]#[fg=default]'
set -g status-left-length 20

### Background windows with event
setw -g window-status-bell-style bg=colour7

## Window with activity status
set -g window-status-activity-style bg=yellow # fg and bg are flipped here

set -g message-style fg=colour232,bg=colour14,bold
set -g message-command-style fg=colour14,bg=colour232

## Clock mode
set -g clock-mode-colour red
set -g clock-mode-style 24


set -g pane-active-border-style fg=colour4

### Highlight current pane
#set -g window-active-style 'fg=colour255,bg=colour232'  # Current pane
#set -g window-style 'fg=colour7,bg=colour234'   # Other panes


## END THEME

# Only if reattach is installed, to make clipboard work systewide on mac
if-shell "if type \"reattach-to-user-namespace\" >/dev/null 2>&1; then true; else false; fi" \
    'bind -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'

# Check for xsel and pipe the selected text (linux)
if-shell "if type \"xsel\" >/dev/null 2>&1; then true; else false; fi" \
    'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"'

